# This is a basic workflow to help you get started with Actions

name: UMGC CITY WEB API DEPLOY DEV

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
    tags:
      - '*'
      
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy-docker:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2
           
      - name: Deploy to DockerHub
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_AUTH: ${{secrets.DOCKER_AUTH}}
        run: mvn -e compile jib:build -Djib.to.auth.username=umgccaps -Djib.to.auth.password=$DOCKER_AUTH

  deploy-heroku:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2
           
      - name: Deploy to Heroku Dev
        env:
          HEROKU_API_KEY: ${{secrets.UMGC_HEROKU_API_KEY}}
        run: mvn -Dmaven.test.skip=true -e clean heroku:deploy -Dheroku.appName=appdev-umgc-cityapi
